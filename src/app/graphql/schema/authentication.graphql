type Query {
  currentUser: AuthenticatedUser
}

type Mutation {
  login(input: LoginInput!): LoginOutput!
  logout: LogoutOutput!
  refreshToken: RefreshTokenOutput!
  addUserAccount(input: AddUserAccountInput!): AddUserAccountOutput!
}

input LoginInput {
  email: String!
  password: String!
}

type LoginOutput {
  authenticatedUser: AuthenticatedUser
}

type LogoutOutput {
  token: String!
}

type RefreshTokenOutput {
  token: String
}

type AuthenticatedUser {
  user: User!
  token: String!
}

type User {
  ksuid: KSUID!
  email: String!
  firstName: String!
  lastName: String!
  timestamp: Timestamp!
  accessRights: [AccessRight!]!
}

input UserInput {
  email: String!
  firstName: String!
  lastName: String!
  accessRights: [AccessRight!]!
}

input AddUserAccountInput {
  user: UserInput!
}

union AddUserAccountOutput = AddUserAccountSuccess | ValidationErrors

type AddUserAccountSuccess {
  user: User
}

enum AccessRight {
  PERSONAL
  RECRUITING
  SENSITIVE
  ADMIN
}
